/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns ()
#define function readNumberOfHorses() view returns (uint256)

/* Storage Slots */
#define constant NUMBER_OF_HORSES_LOCATION = FREE_STORAGE_POINTER()

/* Methods */
#define macro SET_NUMBER_OF_HORSES() = takes (0) returns (0) {
    // 3. Get the value to store from calldata
    0x04 calldataload   // [value]
    // 1. Give it a storage slot
    [NUMBER_OF_HORSES_LOCATION]    // [ptr, value] 
    // 3. Store the value in the storage slot (sstore opcode)
    sstore              // []
    stop
}

#define macro GET_NUMBER_OF_HORSES() = takes (0) returns (0) {
    // Load value from storage.
    [NUMBER_OF_HORSES_LOCATION]   // [ptr] [key]
    sload                // [value]

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

// Find the function selector -> route it to the code that updates horses
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00                        // [0]
    calldataload                // [calldata (32)]
    // How do we cut down the calldata -> function selector
    0xE0                        // [0xe0, calldata (32), 0]
    shr                         // [function selector]

    // __FUNC_SIG("updateHorseNumber(uint256)")
    // cast sig "updateHorseNumber(uint256)"
    // dup1 0xcdfead2e eq set jumpi
    dup1 __FUNC_SIG(updateHorseNumber)          // [0xcdfead2e, function_selector, function_selector]
    eq                                          // [true_if_func_selector_matches, function_selector]
    updateJump                                  // [updateHorseNumberProgramCounter, true/false, function_selector]
    jumpi                                       // [function_selector]
    
    // __FUNC_SIG("readNumberOfHorses()")
    // cast sig "readNumberOfHorses()"
    dup1 __FUNC_SIG(readNumberOfHorses)         // [0xe026c017, function_selector, function_selector]
    eq                                          // [true_if_func_selector_matches, function_selector]
    readJump                                    // [readNumberOfHorsesProgramCounter, true/false, function_selector]
    jumpi                                       // [function_selector]     

    // Jump -> function data associated with the function selector
    // If f_selector = updateHorseNumber -> jump to updateJump ==> 0xcdfead2e
    // If f_selector = readNumberOfHorses -> jump to readJump ==> 0xe026c017
    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()
}
